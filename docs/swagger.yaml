basePath: /
definitions:
  models.User:
    properties:
      created_at:
        description: Hesap oluşturulma tarihi
        example: "2025-05-01T12:00:00Z"
        type: string
      email:
        description: Kullanıcı email adresi
        example: user@example.com
        type: string
      email_verified:
        description: Email doğrulandı mı?
        example: false
        type: boolean
      first_name:
        description: Kullanıcının adı
        example: John
        type: string
      id:
        description: Kullanıcı ID'si
        example: 1
        type: integer
      is_active:
        description: Hesap aktif mi?
        example: true
        type: boolean
      last_name:
        description: Kullanıcının soyadı
        example: Doe
        type: string
      password:
        description: Kullanıcı şifresi
        example: password123
        type: string
      reset_token:
        description: Şifre sıfırlama token'ı
        example: abc123
        type: string
      reset_token_expiry:
        description: Şifre sıfırlama token'ının son kullanma tarihi
        example: "2025-05-02T12:00:00Z"
        type: string
      role:
        description: 'Kullanıcı rolü (örneğin: user, admin)'
        example: user
        type: string
      updated_at:
        description: Hesap güncellenme tarihi
        example: "2025-05-01T12:00:00Z"
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: Kullanıcı giriş/çıkış işlemleri için API.
  title: Auth API
  version: "1.0"
paths:
  /change-password:
    put:
      consumes:
      - application/json
      description: Change the authenticated user's password
      parameters:
      - description: Old and new passwords
        in: body
        name: password
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Change password
      tags:
      - User
  /forget-password:
    post:
      consumes:
      - application/json
      description: Send a password reset email to the user
      parameters:
      - description: User email
        in: body
        name: email
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - Auth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful" example({"message":"login successful","token":"jwt-token-example"})
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request" example({"message":"Invalid request data"})
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized" example({"message":"Invalid credentials"})
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error" example({"message":"Could not authenticate
            user"})
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - Auth
  /me:
    put:
      consumes:
      - application/json
      description: Update the authenticated user's first name and last name
      parameters:
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user details
      tags:
      - User
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset a user's password using a token
      parameters:
      - description: Reset token and new password
        in: body
        name: reset
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset password
      tags:
      - Auth
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account and send a verification email
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully" example({"message":"User created
            and verification mail sent"})
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request" example({"message":"Invalid request data"})
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error" example({"message":"Could not save user"})
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Sign up a new user
      tags:
      - Auth
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of users" example([{"id":1,"email":"user1@example.com","first_name":"John","last_name":"Doe","is_active":true,"email_verified":true,"role":"user"},{"id":2,"email":"user2@example.com","first_name":"Jane","last_name":"Smith","is_active":true,"email_verified":false,"role":"admin"}])
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized" example({"message":"Unauthorized"})
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden" example({"message":"Access denied"})
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error" example({"message":"Could not retrieve
            users"})
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - Admin
  /verify:
    get:
      consumes:
      - application/json
      description: Verify a user's email using a token
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully" example({"message":"Email verified
            successfully"})
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request" example({"message":"Token is required"})
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized" example({"message":"Invalid or expired token"})
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not found" example({"message":"User not found"})
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error" example({"message":"Could not fetch
            user"})
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify email
      tags:
      - Auth
schemes:
- http
swagger: "2.0"
